import { timestamp, shell/*, routes*/ } from '@sapper/service-worker';

const ASSETS = `cache${timestamp}`;


// `shell` is an array of all the files generated by the bundler,
// `files` is an array of everything in the `static` directory

//const to_cache = shell.concat(files);
const to_cache = shell.slice();
const cached = new Set(to_cache);

self.addEventListener('install', event => {
	event.waitUntil(
		caches
			.open(ASSETS)
			.then(cache => cache.addAll(to_cache))
			.then(() => {
				self.skipWaiting();
			})
	);
});

self.addEventListener('activate', event => {
	event.waitUntil(
		caches.keys().then(async keys => {
			// delete old caches
			for (const key of keys) {
				if (key !== ASSETS) await caches.delete(key);
			}

			self.clients.claim();
		})
	);
});

self.addEventListener('fetch', event => {
	if (event.request.method !== 'GET' || event.request.headers.has('range')) return;

	const url = new URL(event.request.url);

	// don't try to handle e.g. data: URIs
	if (!url.protocol.startsWith('http')) return;

	// ignore dev server requests
	if (url.hostname === self.location.hostname && url.port !== self.location.port) return;

	// No Cache
	// /proxy
	if(url.pathname.startsWith("/proxy/")) return;
	
	// * Cache First
	// /static
	if(url.pathname.startsWith("/static/")){
		
		event.respondWith(
			caches.match(event.request)
				.then(cached => {
					
					// if has cached return cached
					if(cached)
						return cached;
					
					// IMPORTANT: clone the request 
					let request = event.request.clone();
					
					return fetch(request).then(response => {

						// Check if we received a valid response
						if(!response || response.status !== 200 || response.type !== "basic"){
							return response;
						}

						// IMPORTANT: clone response
						const responseToCache = response.clone();

						caches.open(ASSETS)
							.then(cache => {
								cache.put(event.request, responseToCache)
							})
						
						return response;
					})
				})
		)

		return;
	}


	// for pages, you might want to serve a shell `service-worker-index.html` file,
	// which Sapper has generated for you. It's not right for every
	// app, but if it's right for yours then uncomment this section
	/*
	if (url.origin === self.origin && routes.find(route => route.pattern.test(url.pathname))) {
		event.respondWith(caches.match('/service-worker-index.html'));
		return;
	}
	*/

	if (event.request.cache === 'only-if-cached') return;

	// Network first
	// everything else
	event.respondWith(
		caches
			.open(`offline${timestamp}`)
			.then(async cache => {
				try {
					const response = await fetch(event.request);
					cache.put(event.request, response.clone());
					return response;
				} catch(err) {
					const response = await cache.match(event.request);
					if (response) return response;

					throw err;
				}
			})
	);
});
