import { U as is_function, V as cubicOut, S as SvelteComponentDev, i as init, s as safe_not_equal, d as dispatch_dev, W as StationImage, x as stores$1, y as stores, z as validate_store, A as component_subscribe, e as element, C as create_component, a as space, H as text, b as claim_element, h as children, D as claim_component, f as detach_dev, g as claim_space, I as claim_text, j as attr_dev, k as add_location, X as stationUrl, m as insert_dev, l as append_dev, E as mount_component, J as set_data_dev, p as transition_in, v as transition_out, F as destroy_component, Y as svg_element, P as noop, Z as validate_each_keys, _ as fix_position, $ as add_transform, a0 as create_animation, r as add_render_callback, a1 as create_bidirectional_transition, K as group_outros, L as check_outros, a2 as update_keyed_each, a3 as fade, a4 as Loading, a5 as fix_and_outro_and_destroy_block, a6 as listen_dev, a7 as prevent_default } from './client.52ec5125.js';

function flip(node, animation, params) {
    const style = getComputedStyle(node);
    const transform = style.transform === 'none' ? '' : style.transform;
    const scaleX = animation.from.width / node.clientWidth;
    const scaleY = animation.from.height / node.clientHeight;
    const dx = (animation.from.left - animation.to.left) / scaleX;
    const dy = (animation.from.top - animation.to.top) / scaleY;
    const d = Math.sqrt(dx * dx + dy * dy);
    const { delay = 0, duration = (d) => Math.sqrt(d) * 120, easing = cubicOut } = params;
    return {
        delay,
        duration: is_function(duration) ? duration(d) : duration,
        easing,
        css: (_t, u) => `transform: ${transform} translate(${u * dx}px, ${u * dy}px);`
    };
}

/* src/Components/RadioItem.svelte generated by Svelte v3.18.2 */
const file = "src/Components/RadioItem.svelte";

function create_fragment(ctx) {
	let a;
	let div0;
	let t0;
	let div1;
	let span;
	let t1_value = /*station*/ ctx[0].name + "";
	let t1;
	let div1_title_value;
	let a_href_value;
	let current;

	const stationimage = new StationImage({
			props: { station: /*station*/ ctx[0], size: "w96" },
			$$inline: true
		});

	const block = {
		c: function create() {
			a = element("a");
			div0 = element("div");
			create_component(stationimage.$$.fragment);
			t0 = space();
			div1 = element("div");
			span = element("span");
			t1 = text(t1_value);
			this.h();
		},
		l: function claim(nodes) {
			a = claim_element(nodes, "A", { class: true, href: true });
			var a_nodes = children(a);
			div0 = claim_element(a_nodes, "DIV", { class: true });
			var div0_nodes = children(div0);
			claim_component(stationimage.$$.fragment, div0_nodes);
			div0_nodes.forEach(detach_dev);
			t0 = claim_space(a_nodes);
			div1 = claim_element(a_nodes, "DIV", { class: true, title: true });
			var div1_nodes = children(div1);
			span = claim_element(div1_nodes, "SPAN", { class: true });
			var span_nodes = children(span);
			t1 = claim_text(span_nodes, t1_value);
			span_nodes.forEach(detach_dev);
			div1_nodes.forEach(detach_dev);
			a_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(div0, "class", "image svelte-1sb6tst");
			add_location(div0, file, 68, 2, 1342);
			attr_dev(span, "class", "svelte-1sb6tst");
			add_location(span, file, 79, 4, 1619);
			attr_dev(div1, "class", "title svelte-1sb6tst");
			attr_dev(div1, "title", div1_title_value = /*station*/ ctx[0].name);
			add_location(div1, file, 78, 2, 1574);
			attr_dev(a, "class", "no-a radioitem svelte-1sb6tst");

			attr_dev(a, "href", a_href_value = stationUrl({
				lang: /*$lang*/ ctx[1],
				station: /*station*/ ctx[0]
			}));

			add_location(a, file, 67, 0, 1271);
		},
		m: function mount(target, anchor) {
			insert_dev(target, a, anchor);
			append_dev(a, div0);
			mount_component(stationimage, div0, null);
			append_dev(a, t0);
			append_dev(a, div1);
			append_dev(div1, span);
			append_dev(span, t1);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			const stationimage_changes = {};
			if (dirty & /*station*/ 1) stationimage_changes.station = /*station*/ ctx[0];
			stationimage.$set(stationimage_changes);
			if ((!current || dirty & /*station*/ 1) && t1_value !== (t1_value = /*station*/ ctx[0].name + "")) set_data_dev(t1, t1_value);

			if (!current || dirty & /*station*/ 1 && div1_title_value !== (div1_title_value = /*station*/ ctx[0].name)) {
				attr_dev(div1, "title", div1_title_value);
			}

			if (!current || dirty & /*$lang, station*/ 3 && a_href_value !== (a_href_value = stationUrl({
				lang: /*$lang*/ ctx[1],
				station: /*station*/ ctx[0]
			}))) {
				attr_dev(a, "href", a_href_value);
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(stationimage.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(stationimage.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(a);
			destroy_component(stationimage);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	let $lang;
	const { page } = stores$1();
	const { lang, countryCode } = stores();
	validate_store(lang, "lang");
	component_subscribe($$self, lang, value => $$invalidate(1, $lang = value));
	let { station } = $$props;
	const writable_props = ["station"];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<RadioItem> was created with unknown prop '${key}'`);
	});

	$$self.$set = $$props => {
		if ("station" in $$props) $$invalidate(0, station = $$props.station);
	};

	$$self.$capture_state = () => {
		return { station, $lang };
	};

	$$self.$inject_state = $$props => {
		if ("station" in $$props) $$invalidate(0, station = $$props.station);
		if ("$lang" in $$props) lang.set($lang = $$props.$lang);
	};

	return [station, $lang, lang];
}

class RadioItem extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, { station: 0 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "RadioItem",
			options,
			id: create_fragment.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*station*/ ctx[0] === undefined && !("station" in props)) {
			console.warn("<RadioItem> was created without expected prop 'station'");
		}
	}

	get station() {
		throw new Error("<RadioItem>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set station(value) {
		throw new Error("<RadioItem>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* node_modules/svelte-material-icons-0/dist/AddCircle.svelte generated by Svelte v3.18.2 */

const file$1 = "node_modules/svelte-material-icons-0/dist/AddCircle.svelte";

function create_fragment$1(ctx) {
	let svg;
	let path;

	const block = {
		c: function create() {
			svg = svg_element("svg");
			path = svg_element("path");
			this.h();
		},
		l: function claim(nodes) {
			svg = claim_element(
				nodes,
				"svg",
				{
					xmlns: true,
					viewBox: true,
					width: true,
					height: true,
					fill: true,
					stroke: true
				},
				1
			);

			var svg_nodes = children(svg);
			path = claim_element(svg_nodes, "path", { d: true }, 1);
			children(path).forEach(detach_dev);
			svg_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(path, "d", "M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm5 11h-4v4h-2v-4H7v-2h4V7h2v4h4v2z");
			add_location(path, file$1, 9, 83, 300);
			attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
			attr_dev(svg, "viewBox", /*viewBox*/ ctx[4]);
			attr_dev(svg, "width", /*width*/ ctx[0]);
			attr_dev(svg, "height", /*height*/ ctx[1]);
			attr_dev(svg, "fill", /*fill*/ ctx[2]);
			attr_dev(svg, "stroke", /*stroke*/ ctx[3]);
			add_location(svg, file$1, 9, 0, 217);
		},
		m: function mount(target, anchor) {
			insert_dev(target, svg, anchor);
			append_dev(svg, path);
		},
		p: function update(ctx, [dirty]) {
			if (dirty & /*viewBox*/ 16) {
				attr_dev(svg, "viewBox", /*viewBox*/ ctx[4]);
			}

			if (dirty & /*width*/ 1) {
				attr_dev(svg, "width", /*width*/ ctx[0]);
			}

			if (dirty & /*height*/ 2) {
				attr_dev(svg, "height", /*height*/ ctx[1]);
			}

			if (dirty & /*fill*/ 4) {
				attr_dev(svg, "fill", /*fill*/ ctx[2]);
			}

			if (dirty & /*stroke*/ 8) {
				attr_dev(svg, "stroke", /*stroke*/ ctx[3]);
			}
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(svg);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$1.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$1($$self, $$props, $$invalidate) {
	let { size = "1.5em" } = $$props;
	let { width = size } = $$props;
	let { height = size } = $$props;
	let { color = "currentColor" } = $$props;
	let { fill = color } = $$props;
	let { stroke = color } = $$props;
	let { viewBox = "0 0 24 24" } = $$props;
	const writable_props = ["size", "width", "height", "color", "fill", "stroke", "viewBox"];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<AddCircle> was created with unknown prop '${key}'`);
	});

	$$self.$set = $$props => {
		if ("size" in $$props) $$invalidate(5, size = $$props.size);
		if ("width" in $$props) $$invalidate(0, width = $$props.width);
		if ("height" in $$props) $$invalidate(1, height = $$props.height);
		if ("color" in $$props) $$invalidate(6, color = $$props.color);
		if ("fill" in $$props) $$invalidate(2, fill = $$props.fill);
		if ("stroke" in $$props) $$invalidate(3, stroke = $$props.stroke);
		if ("viewBox" in $$props) $$invalidate(4, viewBox = $$props.viewBox);
	};

	$$self.$capture_state = () => {
		return {
			size,
			width,
			height,
			color,
			fill,
			stroke,
			viewBox
		};
	};

	$$self.$inject_state = $$props => {
		if ("size" in $$props) $$invalidate(5, size = $$props.size);
		if ("width" in $$props) $$invalidate(0, width = $$props.width);
		if ("height" in $$props) $$invalidate(1, height = $$props.height);
		if ("color" in $$props) $$invalidate(6, color = $$props.color);
		if ("fill" in $$props) $$invalidate(2, fill = $$props.fill);
		if ("stroke" in $$props) $$invalidate(3, stroke = $$props.stroke);
		if ("viewBox" in $$props) $$invalidate(4, viewBox = $$props.viewBox);
	};

	return [width, height, fill, stroke, viewBox, size, color];
}

class AddCircle extends SvelteComponentDev {
	constructor(options) {
		super(options);

		init(this, options, instance$1, create_fragment$1, safe_not_equal, {
			size: 5,
			width: 0,
			height: 1,
			color: 6,
			fill: 2,
			stroke: 3,
			viewBox: 4
		});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "AddCircle",
			options,
			id: create_fragment$1.name
		});
	}

	get size() {
		throw new Error("<AddCircle>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set size(value) {
		throw new Error("<AddCircle>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get width() {
		throw new Error("<AddCircle>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set width(value) {
		throw new Error("<AddCircle>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get height() {
		throw new Error("<AddCircle>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set height(value) {
		throw new Error("<AddCircle>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get color() {
		throw new Error("<AddCircle>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set color(value) {
		throw new Error("<AddCircle>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get fill() {
		throw new Error("<AddCircle>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set fill(value) {
		throw new Error("<AddCircle>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get stroke() {
		throw new Error("<AddCircle>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set stroke(value) {
		throw new Error("<AddCircle>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get viewBox() {
		throw new Error("<AddCircle>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set viewBox(value) {
		throw new Error("<AddCircle>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* src/Components/RadioList.svelte generated by Svelte v3.18.2 */
const file$2 = "src/Components/RadioList.svelte";

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[6] = list[i];
	return child_ctx;
}

// (89:4) {#each stations as station (station._id)}
function create_each_block(key_1, ctx) {
	let div;
	let t;
	let div_transition;
	let rect;
	let stop_animation = noop;
	let current;

	const radioitem = new RadioItem({
			props: { station: /*station*/ ctx[6] },
			$$inline: true
		});

	const block = {
		key: key_1,
		first: null,
		c: function create() {
			div = element("div");
			create_component(radioitem.$$.fragment);
			t = space();
			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);
			claim_component(radioitem.$$.fragment, div_nodes);
			t = claim_space(div_nodes);
			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(div, "class", "svelte-6478ze");
			add_location(div, file$2, 89, 6, 1725);
			this.first = div;
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			mount_component(radioitem, div, null);
			append_dev(div, t);
			current = true;
		},
		p: function update(ctx, dirty) {
			const radioitem_changes = {};
			if (dirty & /*stations*/ 1) radioitem_changes.station = /*station*/ ctx[6];
			radioitem.$set(radioitem_changes);
		},
		r: function measure() {
			rect = div.getBoundingClientRect();
		},
		f: function fix() {
			fix_position(div);
			stop_animation();
			add_transform(div, rect);
		},
		a: function animate() {
			stop_animation();
			stop_animation = create_animation(div, rect, flip, { duration: 500 });
		},
		i: function intro(local) {
			if (current) return;
			transition_in(radioitem.$$.fragment, local);

			if (local) {
				add_render_callback(() => {
					if (!div_transition) div_transition = create_bidirectional_transition(div, fade, { duration: 300 }, true);
					div_transition.run(1);
				});
			}

			current = true;
		},
		o: function outro(local) {
			transition_out(radioitem.$$.fragment, local);

			if (local) {
				if (!div_transition) div_transition = create_bidirectional_transition(div, fade, { duration: 300 }, false);
				div_transition.run(0);
			}

			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			destroy_component(radioitem);
			if (detaching && div_transition) div_transition.end();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block.name,
		type: "each",
		source: "(89:4) {#each stations as station (station._id)}",
		ctx
	});

	return block;
}

// (95:2) {#if paging != null && paging.nextPage}
function create_if_block(ctx) {
	let div;
	let span;
	let current_block_type_index;
	let if_block;
	let current;
	const if_block_creators = [create_if_block_1, create_else_block];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (!/*loading*/ ctx[2]) return 0;
		return 1;
	}

	current_block_type_index = select_block_type(ctx);
	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

	const block = {
		c: function create() {
			div = element("div");
			span = element("span");
			if_block.c();
			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);
			span = claim_element(div_nodes, "SPAN", { class: true });
			var span_nodes = children(span);
			if_block.l(span_nodes);
			span_nodes.forEach(detach_dev);
			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(span, "class", "svelte-6478ze");
			add_location(span, file$2, 96, 6, 1949);
			attr_dev(div, "class", "loadmore svelte-6478ze");
			add_location(div, file$2, 95, 4, 1920);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			append_dev(div, span);
			if_blocks[current_block_type_index].m(span, null);
			current = true;
		},
		p: function update(ctx, dirty) {
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block = if_blocks[current_block_type_index];

				if (!if_block) {
					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block.c();
				}

				transition_in(if_block, 1);
				if_block.m(span, null);
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o: function outro(local) {
			transition_out(if_block);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			if_blocks[current_block_type_index].d();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block.name,
		type: "if",
		source: "(95:2) {#if paging != null && paging.nextPage}",
		ctx
	});

	return block;
}

// (102:8) {:else}
function create_else_block(ctx) {
	let current;
	const loading_1 = new Loading({ props: { size: "2.5em" }, $$inline: true });

	const block = {
		c: function create() {
			create_component(loading_1.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(loading_1.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(loading_1, target, anchor);
			current = true;
		},
		p: noop,
		i: function intro(local) {
			if (current) return;
			transition_in(loading_1.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(loading_1.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(loading_1, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_else_block.name,
		type: "else",
		source: "(102:8) {:else}",
		ctx
	});

	return block;
}

// (98:8) {#if !loading}
function create_if_block_1(ctx) {
	let a;
	let a_href_value;
	let current;
	let dispose;
	const more = new AddCircle({ props: { size: "3em" }, $$inline: true });

	const block = {
		c: function create() {
			a = element("a");
			create_component(more.$$.fragment);
			this.h();
		},
		l: function claim(nodes) {
			a = claim_element(nodes, "A", { class: true, href: true });
			var a_nodes = children(a);
			claim_component(more.$$.fragment, a_nodes);
			a_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(a, "class", "no-a svelte-6478ze");
			attr_dev(a, "href", a_href_value = "" + (/*url*/ ctx[3] + (/*url*/ ctx[3].indexOf("?") == -1 ? "?" : "&") + "page=" + /*paging*/ ctx[1].nextPage));
			add_location(a, file$2, 98, 10, 1989);
		},
		m: function mount(target, anchor) {
			insert_dev(target, a, anchor);
			mount_component(more, a, null);
			current = true;
			dispose = listen_dev(a, "click", prevent_default(/*loadMore*/ ctx[4]), false, true, false);
		},
		p: function update(ctx, dirty) {
			if (!current || dirty & /*url, paging*/ 10 && a_href_value !== (a_href_value = "" + (/*url*/ ctx[3] + (/*url*/ ctx[3].indexOf("?") == -1 ? "?" : "&") + "page=" + /*paging*/ ctx[1].nextPage))) {
				attr_dev(a, "href", a_href_value);
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(more.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(more.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(a);
			destroy_component(more);
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_1.name,
		type: "if",
		source: "(98:8) {#if !loading}",
		ctx
	});

	return block;
}

function create_fragment$2(ctx) {
	let div1;
	let div0;
	let each_blocks = [];
	let each_1_lookup = new Map();
	let t;
	let current;
	let each_value = /*stations*/ ctx[0];
	const get_key = ctx => /*station*/ ctx[6]._id;
	validate_each_keys(ctx, each_value, get_each_context, get_key);

	for (let i = 0; i < each_value.length; i += 1) {
		let child_ctx = get_each_context(ctx, each_value, i);
		let key = get_key(child_ctx);
		each_1_lookup.set(key, each_blocks[i] = create_each_block(key, child_ctx));
	}

	let if_block = /*paging*/ ctx[1] != null && /*paging*/ ctx[1].nextPage && create_if_block(ctx);

	const block = {
		c: function create() {
			div1 = element("div");
			div0 = element("div");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			t = space();
			if (if_block) if_block.c();
			this.h();
		},
		l: function claim(nodes) {
			div1 = claim_element(nodes, "DIV", { class: true });
			var div1_nodes = children(div1);
			div0 = claim_element(div1_nodes, "DIV", { class: true });
			var div0_nodes = children(div0);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(div0_nodes);
			}

			div0_nodes.forEach(detach_dev);
			t = claim_space(div1_nodes);
			if (if_block) if_block.l(div1_nodes);
			div1_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(div0, "class", "list svelte-6478ze");
			add_location(div0, file$2, 87, 2, 1654);
			attr_dev(div1, "class", "radiolist svelte-6478ze");
			add_location(div1, file$2, 86, 0, 1628);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div1, anchor);
			append_dev(div1, div0);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(div0, null);
			}

			append_dev(div1, t);
			if (if_block) if_block.m(div1, null);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			const each_value = /*stations*/ ctx[0];
			group_outros();
			for (let i = 0; i < each_blocks.length; i += 1) each_blocks[i].r();
			validate_each_keys(ctx, each_value, get_each_context, get_key);
			each_blocks = update_keyed_each(each_blocks, dirty, get_key, 1, ctx, each_value, each_1_lookup, div0, fix_and_outro_and_destroy_block, create_each_block, null, get_each_context);
			for (let i = 0; i < each_blocks.length; i += 1) each_blocks[i].a();
			check_outros();

			if (/*paging*/ ctx[1] != null && /*paging*/ ctx[1].nextPage) {
				if (if_block) {
					if_block.p(ctx, dirty);
					transition_in(if_block, 1);
				} else {
					if_block = create_if_block(ctx);
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(div1, null);
				}
			} else if (if_block) {
				group_outros();

				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});

				check_outros();
			}
		},
		i: function intro(local) {
			if (current) return;

			for (let i = 0; i < each_value.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			transition_in(if_block);
			current = true;
		},
		o: function outro(local) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			transition_out(if_block);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div1);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].d();
			}

			if (if_block) if_block.d();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$2.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$2($$self, $$props, $$invalidate) {
	let { stations } = $$props;
	let { paging = null } = $$props;
	let { url = null } = $$props;
	let { apiUrl = null } = $$props;
	let { loading = false } = $$props;

	const loadMore = async () => {
		if (loading || paging == null || !paging.nextPage) return;
		$$invalidate(2, loading = true);

		const nextUrl = apiUrl.indexOf("?") == -1
		? `${apiUrl}?page=${paging.nextPage}`
		: `${apiUrl}&page=${paging.nextPage}`;

		const res = await fetch(nextUrl);
		const json = await res.json();
		$$invalidate(0, stations = [...stations, ...json.items]);
		$$invalidate(1, paging = json.paging);
		$$invalidate(2, loading = false);
	};

	const writable_props = ["stations", "paging", "url", "apiUrl", "loading"];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<RadioList> was created with unknown prop '${key}'`);
	});

	$$self.$set = $$props => {
		if ("stations" in $$props) $$invalidate(0, stations = $$props.stations);
		if ("paging" in $$props) $$invalidate(1, paging = $$props.paging);
		if ("url" in $$props) $$invalidate(3, url = $$props.url);
		if ("apiUrl" in $$props) $$invalidate(5, apiUrl = $$props.apiUrl);
		if ("loading" in $$props) $$invalidate(2, loading = $$props.loading);
	};

	$$self.$capture_state = () => {
		return { stations, paging, url, apiUrl, loading };
	};

	$$self.$inject_state = $$props => {
		if ("stations" in $$props) $$invalidate(0, stations = $$props.stations);
		if ("paging" in $$props) $$invalidate(1, paging = $$props.paging);
		if ("url" in $$props) $$invalidate(3, url = $$props.url);
		if ("apiUrl" in $$props) $$invalidate(5, apiUrl = $$props.apiUrl);
		if ("loading" in $$props) $$invalidate(2, loading = $$props.loading);
	};

	return [stations, paging, loading, url, loadMore, apiUrl];
}

class RadioList extends SvelteComponentDev {
	constructor(options) {
		super(options);

		init(this, options, instance$2, create_fragment$2, safe_not_equal, {
			stations: 0,
			paging: 1,
			url: 3,
			apiUrl: 5,
			loading: 2,
			loadMore: 4
		});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "RadioList",
			options,
			id: create_fragment$2.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*stations*/ ctx[0] === undefined && !("stations" in props)) {
			console.warn("<RadioList> was created without expected prop 'stations'");
		}
	}

	get stations() {
		throw new Error("<RadioList>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set stations(value) {
		throw new Error("<RadioList>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get paging() {
		throw new Error("<RadioList>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set paging(value) {
		throw new Error("<RadioList>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get url() {
		throw new Error("<RadioList>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set url(value) {
		throw new Error("<RadioList>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get apiUrl() {
		throw new Error("<RadioList>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set apiUrl(value) {
		throw new Error("<RadioList>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get loading() {
		throw new Error("<RadioList>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set loading(value) {
		throw new Error("<RadioList>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get loadMore() {
		return this.$$.ctx[4];
	}

	set loadMore(value) {
		throw new Error("<RadioList>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

export { RadioList as R };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
