img.svelte-1neb7v0{width:24px;height:24px;margin-right:12px}
.topbar-title.svelte-1o1khzl{flex:1;font-size:1.25em;display:flex;flex-direction:row;direction:ltr}a.svelte-1o1khzl{display:flex;flex-direction:row}a.svelte-1o1khzl picture{width:24px;height:24px;margin-right:0.5em}.lite.svelte-1o1khzl{color:rgba(255, 255, 255, 0.5)}
.slider.svelte-gvsne5{width:100%;height:0.25em;border-radius:2px;background:currentColor;cursor:pointer;position:relative}.thumb.svelte-gvsne5{position:absolute;top:50%;transform:translate(-50%, -50%);height:0.5em;width:0.5em;border-radius:0.5em;background:#fff;box-shadow:rgba(0,0,0,0.25) 0 0 2px 2px}
.volume.svelte-s1ipwy.svelte-s1ipwy{display:flex;flex-direction:row;align-items:center;overflow:hidden;padding:0.5em}.icon.svelte-s1ipwy.svelte-s1ipwy{flex:none;cursor:pointer;display:flex}.slider.svelte-s1ipwy.svelte-s1ipwy{width:2.5em;height:0.25em;margin-left:0.5em;margin-right:-3em;opacity:0;transition:opacity 200ms ease, margin-right 200ms ease}.volume.svelte-s1ipwy:hover .slider.svelte-s1ipwy,.volume.svelte-s1ipwy:active .slider.svelte-s1ipwy{margin-right:0.5em;opacity:1}
img.svelte-1ffgqxu{width:var(--width);height:calc(var(--width) * 0.6875);object-fit:cover;object-position:center;border-radius:3px}
@keyframes svelte-hq0ga7-CircularProgressCircleIndeterminate{0%{stroke-dasharray:1px, 200px;stroke-dashoffset:0px}50%{stroke-dasharray:100px, 200px;stroke-dashoffset:-15px}100%{stroke-dasharray:100px, 200px;stroke-dashoffset:-125px}}@keyframes svelte-hq0ga7-CircularProgressRotate{100%{transform:rotate(360deg)}}.circular-progress.svelte-hq0ga7{display:flex;align-items:center;justify-content:center;animation:svelte-hq0ga7-CircularProgressRotate 1.4s linear infinite}.circle.indeterminate.svelte-hq0ga7{animation:svelte-hq0ga7-CircularProgressCircleIndeterminate 1.4s ease-in-out infinite;stroke-dasharray:80px, 200px;stroke-dashoffset:0px}
.floatingplayer.svelte-50zt7n.svelte-50zt7n{direction:ltr;display:flex;flex-direction:row;position:fixed;right:0;bottom:var(--adbar-height);width:100%;height:86px;box-shadow:0 2px 8px rgba(0,0,0,0.25), 0 1px 5px rgba(0,0,0,0.22);color:#292929;background:#fff;border-top:rgba(0,0,0,0.15) 1px solid;align-items:center;--spacing:0.5em;--button-size:2.5em}.player.svelte-50zt7n.svelte-50zt7n{display:flex;flex-direction:row}.image.svelte-50zt7n.svelte-50zt7n{position:relative;cursor:pointer;margin-left:0.5em;--width:85px;width:var(--width);border-radius:2px 0 0 2px;overflow:hidden}.text.svelte-50zt7n.svelte-50zt7n{font-size:14px;display:flex;flex-direction:column;align-self:center;flex:1}.text.svelte-50zt7n>a.svelte-50zt7n{white-space:nowrap;overflow:hidden;text-overflow:ellipsis;padding:1.25em}.volume.svelte-50zt7n.svelte-50zt7n{font-size:1.5rem;display:none;color:#666;margin-right:var(--spacing)}.toggle.svelte-50zt7n.svelte-50zt7n,.close.svelte-50zt7n.svelte-50zt7n{display:flex;align-items:center;justify-content:center;font-size:1.25em;color:#666;box-sizing:content-box;height:100%;flex:none;cursor:pointer;align-self:center;height:var(--button-size);width:var(--button-size);margin-right:var(--spacing)}.cover.svelte-50zt7n.svelte-50zt7n{position:absolute;top:0;left:0;bottom:0;right:0;display:flex;background-color:rgba(0,0,0,0.5)}.icon.svelte-50zt7n.svelte-50zt7n{display:flex;margin:auto;color:#fff;filter:drop-shadow(#000 0 0 2px)}.media-element.svelte-50zt7n.svelte-50zt7n{display:none}@media screen and (min-width: 600px){.floatingplayer.svelte-50zt7n.svelte-50zt7n{--spacing:1em}.volume.svelte-50zt7n.svelte-50zt7n{display:flex}}
.search.svelte-ylgfos{display:flex;align-items:center;margin:0;padding:0 0 0 0.75em;background:rgba(255,255,255,0.25);border-radius:100px}.field.svelte-ylgfos{font:inherit;font-size:1.1rem;border:none;padding:0.5em;outline:none;width:100%;border-radius:2px;overflow:hidden;text-overflow:ellipsis;white-space:nowrap;background:transparent;color:#fff}.field.svelte-ylgfos::placeholder{color:rgba(255,255,255,0.8)}.icon.svelte-ylgfos{display:flex}input[type=search].svelte-ylgfos::-ms-clear,input[type=search].svelte-ylgfos::-ms-reveal{display:none;width:0;height:0}input[type="search"].svelte-ylgfos::-webkit-search-decoration,input[type="search"].svelte-ylgfos::-webkit-search-cancel-button,input[type="search"].svelte-ylgfos::-webkit-search-results-button,input[type="search"].svelte-ylgfos::-webkit-search-results-decoration{display:none}
.topbar.svelte-102tnj9.svelte-102tnj9{position:fixed;z-index:9999;top:0;left:0;width:100%;height:var(--topbar-height);display:flex;flex-direction:column;background:var(--primary-color);color:var(--contrast-color);box-shadow:rgba(0, 0, 0, 0.25) 0 1px 2px 2px}.phone.svelte-102tnj9.svelte-102tnj9,.desktop.svelte-102tnj9.svelte-102tnj9{height:var(--topobar-height);display:flex;flex-direction:row;align-items:center}.desktop.svelte-102tnj9.svelte-102tnj9{display:none}@media screen and (min-width: 600px){.desktop.svelte-102tnj9.svelte-102tnj9{display:flex}.phone.svelte-102tnj9.svelte-102tnj9{display:none}}.touchsquare.svelte-102tnj9.svelte-102tnj9{flex:none;display:flex;width:var(--topbar-height);height:var(--topbar-height);cursor:pointer;transition:background-color 200ms ease}.touchsquare.svelte-102tnj9.svelte-102tnj9:hover{background:rgba(0, 0, 0, 0.25)}.icon.svelte-102tnj9.svelte-102tnj9{flex:none;display:flex;margin:auto;font-size:1.25rem}.desktop.svelte-102tnj9.svelte-102tnj9 .topbar-title{flex:none;margin-right:1.5em}.search.svelte-102tnj9.svelte-102tnj9{flex:1}.desktop.svelte-102tnj9 .search.svelte-102tnj9{padding-right:1.5rem}
.cover.svelte-trrpqq.svelte-trrpqq.svelte-trrpqq{position:fixed;top:0;left:0;width:100%;height:100%;background:rgba(0, 0, 0, 0.75);z-index:15000}.menu.svelte-trrpqq.svelte-trrpqq.svelte-trrpqq{background:#fff;position:fixed;top:0;left:0;width:300px;max-width:80%;height:100%;z-index:15100;transform:translateX(-105%);transition:transform 150ms ease-in-out;display:flex;flex-direction:column}.open.svelte-trrpqq.svelte-trrpqq>.menu.svelte-trrpqq.svelte-trrpqq{transform:none}.title.svelte-trrpqq.svelte-trrpqq.svelte-trrpqq{font-size:1.5rem;transition:opacity 150ms ease;color:var(--primary-color);border-bottom:rgba(0, 0, 0, 0.15) 1px solid;flex:none;display:flex;flex-direction:row;align-items:center}.title.svelte-trrpqq.svelte-trrpqq span.svelte-trrpqq.svelte-trrpqq{opacity:0.4}.close.svelte-trrpqq.svelte-trrpqq.svelte-trrpqq{flex:none;display:flex;font-size:0.75em;cursor:pointer;padding:1rem;transition:background-color 200ms ease}.close.svelte-trrpqq.svelte-trrpqq.svelte-trrpqq:hover{background:rgba(61, 90, 254, 0.25)}.content.svelte-trrpqq.svelte-trrpqq.svelte-trrpqq{display:flex;flex-direction:column;flex:1;overflow-y:auto;overflow-x:hidden;font-size:1.25em}.group.svelte-trrpqq.svelte-trrpqq.svelte-trrpqq{padding:0.5em 0;flex:none}.group+.group.svelte-trrpqq.svelte-trrpqq.svelte-trrpqq{border-top:rgba(0, 0, 0, 0.15) 1px solid}.content.svelte-trrpqq.svelte-trrpqq a.svelte-trrpqq.svelte-trrpqq{display:inline-flex;align-items:center;color:var(--primary-color);padding:0.5em 1em}.content.svelte-trrpqq a.svelte-trrpqq>span.svelte-trrpqq{margin-left:0.75em}.langs.svelte-trrpqq.svelte-trrpqq.svelte-trrpqq{margin-top:auto}
.dashboard.svelte-169hnap{padding-top:var(--topbar-height);height:100%;overflow:hidden;display:flex;flex-direction:column}.or-adbar.svelte-169hnap{position:fixed;bottom:0;left:0;width:100%;height:var(--adbar-height);box-sizing:border-box;background:#fff;border-top:#999 1px solid}
/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */