import { S as SvelteComponentDev, i as init, s as safe_not_equal, d as dispatch_dev, c as create_slot, e as element, a as space, q as query_selector_all, b as claim_element, f as detach_dev, g as claim_space, h as children, j as attr_dev, k as add_location, t as toggle_class, l as append_dev, m as insert_dev, n as get_slot_context, o as get_slot_changes, p as transition_in, r as add_render_callback, u as create_in_transition, v as transition_out, w as fly } from './client.0f770ca4.js';

/* src/Components/Page.svelte generated by Svelte v3.18.2 */
const file = "src/Components/Page.svelte";

function create_fragment(ctx) {
	let title_value;
	let meta0;
	let meta0_content_value;
	let meta1;
	let meta1_content_value;
	let meta2;
	let meta2_content_value;
	let link;
	let link_href_value;
	let t;
	let div;
	let div_intro;
	let current;
	document.title = title_value = /*meta*/ ctx[1].title;
	const default_slot_template = /*$$slots*/ ctx[3].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[2], null);

	const block = {
		c: function create() {
			meta0 = element("meta");
			meta1 = element("meta");
			meta2 = element("meta");
			link = element("link");
			t = space();
			div = element("div");
			if (default_slot) default_slot.c();
			this.h();
		},
		l: function claim(nodes) {
			const head_nodes = query_selector_all("[data-svelte=\"svelte-1o80jtc\"]", document.head);
			meta0 = claim_element(head_nodes, "META", { name: true, content: true });
			meta1 = claim_element(head_nodes, "META", { property: true, content: true });
			meta2 = claim_element(head_nodes, "META", { property: true, content: true });
			link = claim_element(head_nodes, "LINK", { href: true, rel: true });
			head_nodes.forEach(detach_dev);
			t = claim_space(nodes);
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);
			if (default_slot) default_slot.l(div_nodes);
			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(meta0, "name", "description");
			attr_dev(meta0, "content", meta0_content_value = /*meta*/ ctx[1].desc);
			add_location(meta0, file, 21, 1, 319);
			attr_dev(meta1, "property", "og:title");
			attr_dev(meta1, "content", meta1_content_value = /*meta*/ ctx[1].title);
			add_location(meta1, file, 22, 1, 366);
			attr_dev(meta2, "property", "og:description");
			attr_dev(meta2, "content", meta2_content_value = /*meta*/ ctx[1].desc);
			add_location(meta2, file, 23, 1, 415);
			attr_dev(link, "href", link_href_value = /*meta*/ ctx[1].canonical);
			attr_dev(link, "rel", "canonical");
			add_location(link, file, 24, 1, 469);
			attr_dev(div, "class", "page svelte-1704sr5");
			toggle_class(div, "radiolist", /*radiolist*/ ctx[0]);
			add_location(div, file, 27, 0, 532);
		},
		m: function mount(target, anchor) {
			append_dev(document.head, meta0);
			append_dev(document.head, meta1);
			append_dev(document.head, meta2);
			append_dev(document.head, link);
			insert_dev(target, t, anchor);
			insert_dev(target, div, anchor);

			if (default_slot) {
				default_slot.m(div, null);
			}

			current = true;
		},
		p: function update(ctx, [dirty]) {
			if ((!current || dirty & /*meta*/ 2) && title_value !== (title_value = /*meta*/ ctx[1].title)) {
				document.title = title_value;
			}

			if (!current || dirty & /*meta*/ 2 && meta0_content_value !== (meta0_content_value = /*meta*/ ctx[1].desc)) {
				attr_dev(meta0, "content", meta0_content_value);
			}

			if (!current || dirty & /*meta*/ 2 && meta1_content_value !== (meta1_content_value = /*meta*/ ctx[1].title)) {
				attr_dev(meta1, "content", meta1_content_value);
			}

			if (!current || dirty & /*meta*/ 2 && meta2_content_value !== (meta2_content_value = /*meta*/ ctx[1].desc)) {
				attr_dev(meta2, "content", meta2_content_value);
			}

			if (!current || dirty & /*meta*/ 2 && link_href_value !== (link_href_value = /*meta*/ ctx[1].canonical)) {
				attr_dev(link, "href", link_href_value);
			}

			if (default_slot && default_slot.p && dirty & /*$$scope*/ 4) {
				default_slot.p(get_slot_context(default_slot_template, ctx, /*$$scope*/ ctx[2], null), get_slot_changes(default_slot_template, /*$$scope*/ ctx[2], dirty, null));
			}

			if (dirty & /*radiolist*/ 1) {
				toggle_class(div, "radiolist", /*radiolist*/ ctx[0]);
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(default_slot, local);

			if (!div_intro) {
				add_render_callback(() => {
					div_intro = create_in_transition(div, fly, { x: -25, duration: 300 });
					div_intro.start();
				});
			}

			current = true;
		},
		o: function outro(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d: function destroy(detaching) {
			detach_dev(meta0);
			detach_dev(meta1);
			detach_dev(meta2);
			detach_dev(link);
			if (detaching) detach_dev(t);
			if (detaching) detach_dev(div);
			if (default_slot) default_slot.d(detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	let { radiolist = false } = $$props;
	let { meta } = $$props;
	const writable_props = ["radiolist", "meta"];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Page> was created with unknown prop '${key}'`);
	});

	let { $$slots = {}, $$scope } = $$props;

	$$self.$set = $$props => {
		if ("radiolist" in $$props) $$invalidate(0, radiolist = $$props.radiolist);
		if ("meta" in $$props) $$invalidate(1, meta = $$props.meta);
		if ("$$scope" in $$props) $$invalidate(2, $$scope = $$props.$$scope);
	};

	$$self.$capture_state = () => {
		return { radiolist, meta };
	};

	$$self.$inject_state = $$props => {
		if ("radiolist" in $$props) $$invalidate(0, radiolist = $$props.radiolist);
		if ("meta" in $$props) $$invalidate(1, meta = $$props.meta);
	};

	return [radiolist, meta, $$scope, $$slots];
}

class Page extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, { radiolist: 0, meta: 1 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Page",
			options,
			id: create_fragment.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*meta*/ ctx[1] === undefined && !("meta" in props)) {
			console.warn("<Page> was created without expected prop 'meta'");
		}
	}

	get radiolist() {
		throw new Error("<Page>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set radiolist(value) {
		throw new Error("<Page>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get meta() {
		throw new Error("<Page>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set meta(value) {
		throw new Error("<Page>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

export { Page as P };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUGFnZS5lMjhiZTkwNy5qcyIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL0NvbXBvbmVudHMvUGFnZS5zdmVsdGUiXSwic291cmNlc0NvbnRlbnQiOlsiPHN0eWxlPlxuICAucGFnZXtcbiAgICBwYWRkaW5nLWJvdHRvbTogOHJlbTtcbiAgfVxuXG4gIC5wYWdlID4gOmdsb2JhbChoMSkge1xuICAgIGZvbnQtc2l6ZTogMmVtO1xuICAgIG1hcmdpbjogMS41ZW0gMWVtIDFlbSAxZW07XG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xuXG4gIH1cbjwvc3R5bGU+XG5cbjxzY3JpcHQ+XG4gIGltcG9ydCB7Zmx5fSBmcm9tIFwic3ZlbHRlL3RyYW5zaXRpb25cIjtcbiAgZXhwb3J0IGxldCByYWRpb2xpc3QgPSBmYWxzZTtcbiAgZXhwb3J0IGxldCBtZXRhO1xuPC9zY3JpcHQ+XG5cbjxzdmVsdGU6aGVhZD5cbiAgPHRpdGxlPnttZXRhLnRpdGxlfTwvdGl0bGU+XG5cdDxtZXRhIG5hbWU9XCJkZXNjcmlwdGlvblwiIGNvbnRlbnQ9e21ldGEuZGVzY30+XG5cdDxtZXRhIHByb3BlcnR5PVwib2c6dGl0bGVcIiBjb250ZW50PXttZXRhLnRpdGxlfT5cblx0PG1ldGEgcHJvcGVydHk9XCJvZzpkZXNjcmlwdGlvblwiIGNvbnRlbnQ9e21ldGEuZGVzY30+XG5cdDxsaW5rIGhyZWY9e21ldGEuY2Fub25pY2FsfSByZWw9XCJjYW5vbmljYWxcIiAvPlxuPC9zdmVsdGU6aGVhZD5cblxuPGRpdiBjbGFzcz1cInBhZ2VcIiBjbGFzczpyYWRpb2xpc3QgaW46Zmx5fGludHJvPXt7eDogLTI1LCBkdXJhdGlvbjogMzAwfX0+XG4gIDxzbG90Lz5cbjwvZGl2PiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7O3lDQW9CVSxHQUFJLElBQUMsS0FBSzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs2REFDZSxHQUFJLElBQUMsSUFBSTs7OzZEQUNSLEdBQUksSUFBQyxLQUFLOzs7NkRBQ0osR0FBSSxJQUFDLElBQUk7O3FEQUN0QyxHQUFJLElBQUMsU0FBUzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzttRkFKakIsR0FBSSxJQUFDLEtBQUs7Ozs7aUdBQ2UsR0FBSSxJQUFDLElBQUk7Ozs7aUdBQ1IsR0FBSSxJQUFDLEtBQUs7Ozs7aUdBQ0osR0FBSSxJQUFDLElBQUk7Ozs7eUZBQ3RDLEdBQUksSUFBQyxTQUFTOzs7Ozs7Ozs7Ozs7Ozs7Ozs7a0RBR3NCLENBQUMsR0FBRyxFQUFFLEVBQUUsUUFBUSxFQUFFLEdBQUc7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7T0F6QnpELFNBQVMsR0FBRyxLQUFLO09BQ2pCLElBQUk7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzsifQ==
